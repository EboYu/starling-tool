/* Revised lclist-starling.cvf to fit more nicely with GRASShopper. */

pragma grasshopper_include {./grasshopper/lclist-module.spl};
pragma grasshopper_footprint {X};
pragma grasshopper_footprint_sort {Set<Node>};

typedef int Node;

shared int ub;    // upper bound on the list
shared Node head; // start of the list

thread Node prev, curr;
thread int v, cv;

view wf(int v), isHead(Node node), isVal(Node node, int v);
view has1Lock(Node x, Node y), has1LockAnon(Node x), has2Lock(Node x, Node y);

method deleteVal(int v) {
  {| wf(v) |}
    <prev = head>;
  {| wf(v) * isHead(prev) |}
   <{ %{ waitLock([|prev|]); takeLock([|prev|]) }; }>;
  {| wf(v) * has1LockAnon(prev) * isHead(prev) |}
   curr = %{ [|prev|].next };
  {| wf(v) * has1Lock(prev, curr) * isHead(prev) |}
   <{ %{ waitLock([|curr|]); takeLock([|curr|]) }; }>;
  {| wf(v) * has2Lock(prev, curr) |}
   cv = %{ [|curr|].val };
  {| wf(v) * has2Lock(prev,curr) * isVal(curr, cv) |}
    while (cv < v ) {
      {| wf(v) * wf(cv) * has2Lock(prev, curr) * isVal(curr, cv) |}
        <%{ releaseLock([|prev|]) }>;
      {| wf(v) * wf(cv) * has1LockAnon(curr) * isVal(curr, cv) |}
        prev = curr;
        curr = %{ [|curr|].next };
      {| wf(v) * wf(cv) * has1Lock(prev, curr) * isVal(prev,cv) |}
        <{ %{ waitLock([|curr|]); takeLock([|curr|]) }; }>;
      {| wf(v) * has2Lock(prev, curr) |}
        cv = %{ [|curr|].val };
      {| wf(v) * has2Lock(prev, curr) * isVal(curr,cv) |}
    }
  {| wf(v) * has2Lock(prev, curr) * isVal(curr, cv) |}
    if (cv == v) {
      {| wf(cv) * has2Lock(prev, curr) * isVal(curr, cv) |}
        // Merged these two to avoid dangling nodes
        <{ %{ [|prev|].next := [|curr|].next };
           %{ disposeNode([|curr|]) }; }>;
      {| has1LockAnon(prev) |}
    }
    else {
      {| has2Lock(prev, curr) |}
        <%{ releaseLock([|curr|])}>;
      {| has1LockAnon(prev) |}
    }
  {| has1LockAnon(prev) |}
    <%{ releaseLock([|prev|]) }>;
  {| emp |}
}

constraint emp -> %{ isListG(X, [|head|], [|ub|]) };

constraint wf(v)      ->  v < ub;
constraint isHead(x)  ->  x == head;

constraint has1Lock(a,b)    ->  %{ has1LockG(X, [|a|], [|b|]) };
constraint has1LockAnon(a)  ->  %{ exists e: Node :: has1LockG(X, [|a|], e) };
constraint has2Lock(a,b)    ->  %{ exists e: Node :: has2LockG(X, [|a|], [|b|], e) };

constraint has1Lock(a, b)  * isVal(node,v)  ->  a == node => %{ isValG(X,[|node|],[|v|]) };
constraint has1LockAnon(a) * isVal(node,v)  ->  a == node => %{ isValG(X,[|node|],[|v|]) };
constraint has2Lock(a, b)  * isVal(node,v)  ->  b == node => %{ isValG(X,[|node|],[|v|]) };

// Constraints on view interactions
constraint has1Lock(a,b)   * has1Lock(c,d)    ->  a != c;
constraint has1Lock(a,b)   * has1LockAnon(c)  ->  a != c;
constraint has1LockAnon(a) * has1LockAnon(c)  ->  a != c;
constraint has1Lock(a,b)   * has2Lock(c,d)    ->  a != c && a != d;
constraint has1LockAnon(a) * has2Lock(c,d)    ->  a != c && a != d;
constraint has2Lock(a,b)   * has2Lock(c,d)    ->  a != c && a != d && b != c && b != d;
