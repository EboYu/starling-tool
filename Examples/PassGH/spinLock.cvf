// Allocatable version of Examples/Pass/spinLock.cvf.

typedef int Lock;
typedef bool Bool;

pragma grasshopper_include {./grasshopper/spinlock-module.spl};
pragma grasshopper_footprint {LockFoot};
pragma grasshopper_footprint_sort {Set<Lock>};

thread Lock x, ret;
thread bool test;  // Used when trying to take the lock.

view holdLock(Lock x);
view isLock(Lock x);

method newLock() {
  {| emp |}
    ret = %{new Lock}();
  {| newLock(ret) |}
    <%{#1.lock := false}(ret)[]>;
  {| isLock(ret) |}
}

method lock(Lock x) {
  {| isLock(x) |}
    do {
      {| isLock(x) |}
        test = false;
      {| if test == false then isLock(x) else False() |}
        test = %{ CAS_to_true(#1) }(x);
      {| if test == false then isLock(x) else holdLock(x) |}
    } while (test == true);
  {| holdLock(x) |}
}

method unlock(Lock x) {
  {| holdLock(x) |}
    <%{#1.lock := false}(x)[]>;
  {| isLock(x) |}
}

method split(Lock x) {
  {| isLock(x) |}
    ;
  {| isLock(x) * isLock(x) |}
}

// False is a hack to implement local variable reasoning.
view False();
constraint False() -> false;

constraint holdLock(x) * holdLock(y) -> x != y;

constraint holdLock(x)  ->  %{ #1 in LockFoot && #1.lock == true }(x);
constraint isLock(x)    ->  %{ #1 in LockFoot }(x);
constraint newLock(x)   ->  %{ #1 in LockFoot }(x);

constraint isLock(x)   * newLock(y)   ->  x != y;
constraint holdLock(x) * newLock(y)   ->  x != y;
constraint newLock(x)  * newLock(y)   ->  x != y;

constraint holdLock(x) * holdLock(y)  ->  x != y;
