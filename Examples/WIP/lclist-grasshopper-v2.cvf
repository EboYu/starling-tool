/* Revised lclist-starling.cvf to fit more nicely with GRASShopper. */

pragma grasshopper_include {./grasshopper/lclist-module.spl};
pragma grasshopper_footprint {X};
pragma grasshopper_footprint_sort {Set<Node>};

typedef int Node;
typedef int Int;

shared Int heap;
shared Node head;
shared Int ub; // upper bound on the list

thread Node prev;
thread Node curr;

thread Int v;
thread Int cv;

view wf(Int v);
view isHead(Node node); 
view isVal(Node node, Int v);
view has1Lock(Node x, Node y);
view has1LockAnon(Node x);
view has2Lock(Node x, Node y);

method deleteVal(Int v) {
  {| wf(v) |}
    <prev = head>;
  {| wf(v) * isHead(prev) |} 
   <%{ takeLock(#1) }(prev)[heap]>; 
  {| wf(v) * has1LockAnon(prev) * isHead(prev) |}
   curr = (%{ #1.next }(curr)); 
  {| wf(v) * has1Lock(prev, curr) * isHead(prev) |}
   <%{ takeLock(#1) }(curr)[heap]>;
  {| wf(v) * has2Lock(prev, curr) |}
   cv = (%{ #1.val }(curr)); 
  {| wf(v) * has2Lock(prev,curr) * isVal(curr, cv) |}
    while (cv < v ) {
      {| wf(v) * wf(cv) * has2Lock(prev, curr) * isVal(curr, cv) |}
        <%{ releaseLock(#1) }(prev)[heap]>; 
      {| wf(v) * wf(cv) * has1LockAnon(curr) * isVal(curr, cv) |}
        prev = curr;
        curr = (%{ #1.next }(curr));  
      {| wf(v) * wf(cv) * has1Lock(prev, curr) * isVal(prev,cv) |}
        <%{ takeLock(#1) }(curr)[heap]>; 
      {| wf(v) * has2Lock(prev, curr) |}
        cv = (%{ #1.val }(curr)); 
      {| wf(v) * has1Lock(prev, curr) * isVal(curr,cv) |}
    }
  {| has2Lock(prev, curr) |}
    if ( cv == v) {
      {| has2Lock(prev, curr) |}
        // Merged these two to avoid dangling nodes 
        <{ %{ #1.next := #2.next }(prev, curr)[heap]; 
           %{ disposeNode(#1) }(curr)[heap]; }>; 
      {| has1LockAnon(prev) |}
    } 
    else {
      {| has2Lock(prev, curr) |}
        <%{ releaseLock(#1)}(curr)[heap]>; 
      {| has1LockAnon(prev) |}
    }
  {| has1LockAnon(prev) |}
    <%{ releaseLock(#1) }(prev)[heap]>; 
  {| emp |}
}

constraint emp -> %{ isListG(X, #1,#2) }(head,ub); 

constraint wf(v) -> v < ub;

constraint isHead(x) -> x == head;

constraint has1Lock(a,b) -> %{ has1LockG(X, #1,#2) }(a,b);

constraint has1LockAnon(a) -> %{ exists e: Node :: has1LockG(X, #1, e) }(a);

constraint has2Lock(a,b)  -> %{ exists e: Node :: has2LockG(X, #1, #2, e) }(a,b);

constraint isVal(node,v) -> %{ isValG(X,#1,#2) }(node, v) && v < ub;

// Constraints on view interactions
constraint has1Lock(a,b)   * has1Lock(c,d)    ->  a != c;
constraint has1Lock(a,b)   * has1LockAnon(c)  ->  a != c;
constraint has1LockAnon(a) * has1LockAnon(c)  ->  a != c;
constraint has1Lock(a,b)   * has2Lock(c,d)    ->  a != c && a != d;
constraint has1LockAnon(a) * has2Lock(c,d)    ->  a != c && a != d;
constraint has2Lock(a,b)   * has2Lock(c,d)    ->  a != c && a != d && b != c && b != d;
