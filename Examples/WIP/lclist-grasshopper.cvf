/* Revised lclist-starling.cvf to fit more nicely with GRASShopper. */

typedef int Node;
typedef int Int;

shared Int heap; 
shared Node head;
shared Int ub; // upper bound on the list

thread Int lheap;
thread Node prev;
thread Node curr;

thread Int cv;

view wf(Int v);
view isHead(Node node); 
view isVal(Node node, Int v);
view has1Lock(Node x, Node y);
view has1LockAnon(Node x);
view has2Lock(Node x, Node y);

method deleteVal(Int v) {
  {| wf(v) |}
    <prev = head>;
  {| wf(v) * isHead(prev) |} 
   <{ lheap = heap; heap = (%{ takeLock(#2) }(lheap, prev)); }>;
  {| wf(v) * has1LockAnon(prev) * isHead(prev) |}
   <lheap = heap>; curr = (%{ #2.next }(lheap, curr)); 
  {| wf(v) * has1Lock(prev, curr) |}
   <{ lheap = heap; heap = (%{ takeLock(#2) }(lheap, curr)); }>;
  {| wf(v) * has2Lock(prev, curr) |}
   <lheap = heap>; cv = (%{ #2.val }(lheap, curr)); 
  {| wf(v) * has2Lock(prev,curr) * isVal(curr, cv) |}
    while (cv < v) {
      {| wf(v) * has2Lock(prev, curr) * isVal(curr, cv) |}
        <{ lheap = heap; heap = (%{ releaseLock(#2) }(lheap, prev)); }>; 
      {| wf(v) * has1LockAnon(curr) * isVal(curr, cv) |}
        prev = curr;
        <lheap = heap>; curr = (%{ #2.next }(lheap, curr));  
      {| wf(v) * has1Lock(prev, curr) * isVal(prev,cv) |}
        <{ lheap = heap; heap = (%{ takeLock(#2) }(lheap, curr)); }>; 
      {| wf(v) * has2Lock(prev, curr) |}
        <lheap = heap>; cv = (%{ #2.val }(lheap, curr)); 
      {| wf(v) * has1Lock(prev, curr) * isVal(curr,cv) |}
    }
  {| has2Lock(prev, curr) |}
    if ( cv == v) {
      {| has2Lock(prev, curr) |}
        // Merged these two to avoid dangling nodes. 
        <{ lheap = heap; 
           heap = (%{ #2.next := #3.next }(lheap, prev, curr)); 
           lheap = heap; heap = (%{ disposeNode(#2) }(lheap, curr)); }>; 
      {| has1LockAnon(prev) |}
    } 
    else {
      {| has2Lock(prev, curr) |}
        <{ lheap = heap; heap = (%{ releaseLock(#1)}(curr)); }>; 
      {| has1LockAnon(prev) |}
    }
  {| has1LockAnon(prev) |}
    <{ lheap = heap; heap = (%{ releaseLock(#2) }(lheap, prev)); }>; 
  {| emp |}
}

constraint emp -> %{ isListG(#1,#2) }(head,ub); 

constraint wf(v) -> v < ub;

constraint isHead(x) -> x == head;

constraint has1Lock(a,b) -> %{ has1LockG(#1,#2,#3) }(head,a,b);

constraint has1LockAnon(a) -> %{ exists e: Node :: has1LockG(#1,#2,e) }(head,a);

constraint has2Lock(a,b)  -> %{ has2LockG(#1,#2,#3) }(head,a,b);

constraint isVal(node,v) -> %{ isValG(#1,#2,#3) &*& #3 < #4 }(head,node,v,ub);


// Constraints on view interactions
constraint has1Lock(a,b)   * has1Lock(c,d)    ->  a != c;
constraint has1Lock(a,b)   * has1LockAnon(c)  ->  a != c;
constraint has1LockAnon(a) * has1LockAnon(c)  ->  a != c;
constraint has1Lock(a,b)   * has2Lock(c,d)    ->  a != c && a != d;
constraint has1LockAnon(a) * has2Lock(c,d)    ->  a != c && a != d;
constraint has2Lock(a,b)   * has2Lock(c,d)    ->  a != c && a != d && b != c && b != d;
