/* Atomic reference counter encoded with integers.
 * Example taken from Derek: http://www.mpi-sws.org/~dreyer/talks/talk-dagstuhl16.pdf
 */

// Variable declarations
shared int free, count;
thread int c;

// View atom declarations
view noArc(), countWas(int c);
view iter arc();  // The arc() view can be iterated

method init() {
  {| noArc() |}
    <{free = 0; count = 1;}>;
  {| arc() |}
}

method clone() {
  {| arc() |}
    <count++>;
  {| arc() * arc() |}
}

method drop() {
  {| arc() |}
    <c = count-->;
  {| countWas(c) |}  // A snapshot of the counter
    if (c == 1) {
        <free = 1>;  // Dispose the object
    }
  {| emp |}
}

// Global invariant
constraint emp -> count >= 0;

// Core specification of arc()
constraint iter[n] arc() ->
    (n > 0) => (free == 0) && // Canâ€™t dispose if a clone exists
    n <= count; // Reference count is correct

// Exclusive initialisation
constraint noArc() -> count == 0 && free == 1;
constraint noArc() * noArc() -> false;
constraint noArc() * countWas(c) -> false;

// Infer a meaning for countWas(c)
constraint countWas(c) -> ?;
