include "./optset-module.spl";

procedure phiS_stable()
  requires exists X : Set<Entry> :: acc(X) &*& phiS(X)
  ensures exists X : Set<Entry> :: acc(X) &*& phiS(X)
{}

procedure phiUB_stable(head : Entry, tail : Entry)
  requires exists X : Set<Entry> :: acc(X) &*& phiUB(X, head, tail)
  ensures exists X : Set<Entry> :: acc(X) &*& phiUB(X, head, tail)
{}

procedure phiRT_stable(tail : Entry)
  requires exists X : Set<Entry> :: acc(X) &*& phiRT(X, tail)
  ensures exists X : Set<Entry> :: acc(X) &*& phiRT(X, tail)
{}

procedure phiAC_stable()
  requires exists X : Set<Entry> :: acc(X) &*& phiAC(X)
  ensures exists X : Set<Entry> :: acc(X) &*& phiAC(X)
{}

procedure globalShape_stable(tail : Entry)
  requires exists X : Set<Entry> :: acc(X) &*& globalShape(X, tail)
  ensures exists X : Set<Entry> :: acc(X) &*& globalShape(X, tail)
{}

procedure globalShape_S_stable(tail : Entry)
  requires exists X : Set<Entry> :: acc(X) &*& (globalShape(X, tail) && phiS(X))
  ensures exists X : Set<Entry> :: acc(X) &*& (globalShape(X, tail) && phiS(X))
{}

procedure globalShape_UB_stable(head : Entry, tail : Entry)
  requires exists X : Set<Entry> :: acc(X) &*& (globalShape(X, tail) && phiUB(X, head, tail))
  ensures exists X : Set<Entry> :: acc(X) &*& (globalShape(X, tail) && phiUB(X, head, tail))
{}

procedure S_UB_stable(head : Entry, tail : Entry)
  requires exists X : Set<Entry> :: acc(X) &*& (phiS(X) && phiUB(X, head, tail))
  ensures exists X : Set<Entry> :: acc(X) &*& (phiS(X) && phiUB(X, head, tail))
{}

procedure RT_S_UB_stable(head : Entry, tail : Entry)
  requires exists X : Set<Entry> :: acc(X) &*& (phiRT(X, tail) && phiS(X) && phiUB(X, head, tail))
  ensures exists X : Set<Entry> :: acc(X) &*& (phiRT(X, tail) && phiS(X) && phiUB(X, head, tail))
{}

procedure AC_S_UB_stable(head : Entry, tail : Entry)
  requires exists X : Set<Entry> :: acc(X) &*& (phiAC(X) && phiS(X) && phiUB(X, head, tail))
  ensures exists X : Set<Entry> :: acc(X) &*& (phiAC(X) && phiS(X) && phiUB(X, head, tail))
{}

procedure global2_stable(head : Entry, tail : Entry)
  requires exists X : Set<Entry> :: acc(X) &*& (phiAC(X) && phiS(X) && phiUB(X, head, tail) && phiRT(X, tail))
  ensures exists X : Set<Entry> :: acc(X) &*& (phiAC(X) && phiS(X) && phiUB(X, head, tail) && phiRT(X, tail))
{}

procedure isSetG_stable(head : Entry, tail : Entry, lb : Int, ub : Int)
  requires exists X : Set<Entry> :: acc(X) &*& isSetG(X, head, tail, lb, ub)
  ensures exists X : Set<Entry> :: acc(X) &*& isSetG(X, head, tail, lb, ub)
{}

// Grouping of smaller set global shape predicates.
predicate globalRTSUB(X : Set<Entry>, head : Entry, tail : Entry)
  requires acc(X) {
	phiRT(X, tail) && 
	phiS(X) &&
	phiUB(X, head, tail) 
}
procedure globalRTSUB_stable(head : Entry, tail : Entry)
  requires exists X : Set<Entry> :: acc(X) &*& globalRTSUB(X, head, tail)
  ensures exists X : Set<Entry> :: acc(X) &*& globalRTSUB(X, head, tail)
{}


// Grouping of smaller set global shape predicates.
predicate globalRTACUB(X : Set<Entry>, head : Entry, tail : Entry)
  requires acc(X) {
	phiRT(X, tail) && 
	phiAC(X) &&
	phiUB(X, head, tail) 
}
procedure globalRTACUB_stable(head : Entry, tail : Entry)
  requires exists X : Set<Entry> :: acc(X) &*& globalRTACUB(X, head, tail)
  ensures exists X : Set<Entry> :: acc(X) &*& globalRTACUB(X, head, tail)
{}

// Grouping of smaller set global shape predicates.
predicate globalRTACS(X : Set<Entry>, head : Entry, tail : Entry)
  requires acc(X) {
	phiRT(X, tail) && 
	phiAC(X) &&
	phiS(X) 
}
procedure globalRTACS_stable(head : Entry, tail : Entry)
  requires exists X : Set<Entry> :: acc(X) &*& globalRTACS(X, head, tail)
  ensures exists X : Set<Entry> :: acc(X) &*& globalRTACS(X, head, tail)
{}

procedure global_stable(head : Entry, tail : Entry)
  requires exists X : Set<Entry> :: acc(X) &*& global(X, head, tail)
  ensures exists X : Set<Entry> :: acc(X) &*& global(X, head, tail)
{}


// These should fail

procedure phiH_sat(X : Set<Entry>, head : Entry)
  requires acc(X) &*& phiH(X, head)
  ensures false {}

procedure phiT_sat(X : Set<Entry>, tail : Entry)
  requires acc(X) &*& phiT(X, tail)
  ensures false {}

procedure phiTnoNext_sat(X : Set<Entry>, tail : Entry)
  requires acc(X) &*& phiTnoNext(X, tail)
  ensures false {}

procedure phiNext_sat(X : Set<Entry>, tail : Entry)
  requires acc(X) &*& phiNext(X, tail)
  ensures false {}

procedure phiLess_sat(X : Set<Entry>)
  requires acc(X) &*& phiLess(X)
  ensures false {}

procedure phiU_sat(X : Set<Entry>, tail : Entry, ub : Int)
  requires acc(X) &*& phiU(X, tail, ub)
  ensures false {}

procedure phiL_sat(X : Set<Entry>, head : Entry, lb : Int)
  requires acc(X) &*& phiL(X, head, lb)
  ensures false {}

procedure phiRT_local_sat(X : Set<Entry>, x : Entry, tail : Entry)
  requires acc(X) &*& phiRT_local(X, x, tail)
  ensures false {}

procedure phiRT_sat(X : Set<Entry>, tail : Entry)
  requires acc(X) &*& phiRT(X, tail)
  ensures false {}

procedure phiAC_sat(X : Set<Entry>)
  requires acc(X) &*& phiAC(X)
  ensures false {}

procedure phiS_sat(X : Set<Entry>)
  requires acc(X) &*& phiS(X)
  ensures false {}

procedure phiUB_sat(X : Set<Entry>, head : Entry, tail : Entry)
  requires acc(X) &*& phiUB(X, head, tail)
  ensures false {}

procedure localShape_sat(X : Set<Entry>, head : Entry, tail : Entry)
  requires acc(X) &*& localShape(X, head, tail)
  ensures false {}

procedure localData_sat(X : Set<Entry>, head : Entry, tail : Entry, lb : Int, ub : Int)
  requires acc(X) &*& localData(X, head, tail, lb, ub)
  ensures false {}

procedure local_sat(X : Set<Entry>, head : Entry, tail : Entry, lb : Int, ub : Int)
  requires acc(X) &*& local(X, head, tail, lb, ub)
  ensures false {}

procedure globalShape_sat(X : Set<Entry>, tail : Entry)
  requires acc(X) &*& globalShape(X, tail)
  ensures false {}

procedure shape_sat(X : Set<Entry>, head : Entry, tail : Entry)
  requires acc(X) &*& localShape(X, head, tail) &*& globalShape(X, tail)
  ensures false {}

procedure global_sat(X : Set<Entry>, head : Entry, tail : Entry)
  requires acc(X) &*& global(X, head, tail)
  ensures false {}

procedure isSetG_sat(X : Set<Entry>, head : Entry, tail : Entry, lb : Int, ub : Int)
  requires acc(X) &*& isSetG(X, head, tail, lb, ub)
  ensures false {}
