include "./optset-module.spl";

procedure remove_C016_000 (
    before_curr: Entry,
    before_pred: Entry
)
requires
    exists X:Set<Entry> :: (
        acc(X) &*&
        (
            before_pred in X && !before_pred.fresh &&
            before_curr in X && !before_curr.fresh &&
            before_pred.next == before_curr &&
            !before_curr.next.fresh &&
            before_pred.key < before_curr.next.key &&
    phiS(X) &&
            (exists n : Entry :: n in X && before_curr != n && before_curr.next == n) &&
            (forall x : Entry ::
                (x in X && (exists y : Entry :: y in X && x.next == y)) ==>
                (x != x.next && (!Btwn(next, x.next, x, x)))) &&
            (forall z : Entry :: (z in X && z.next != null) ==> z.key < z.next.key)
        )
    )
ensures
    exists X:Set<Entry> :: (
        acc(X) &*&
        (
            (forall z : Entry :: (z in X && !z.fresh && z.next != null) ==> z.key < z.next.key)
        )
    )
{
    before_pred.next := before_curr.next ;
}

procedure phiS_stable()
  requires exists X : Set<Entry> :: acc(X) &*& phiS(X)
  ensures exists X : Set<Entry> :: acc(X) &*& phiS(X)
{}

procedure phiUB_stable(head : Entry, tail : Entry)
  requires exists X : Set<Entry> :: acc(X) &*& phiUB(X, head, tail)
  ensures exists X : Set<Entry> :: acc(X) &*& phiUB(X, head, tail)
{}

procedure phiRT_stable(tail : Entry)
  requires exists X : Set<Entry> :: acc(X) &*& phiRT(X, tail)
  ensures exists X : Set<Entry> :: acc(X) &*& phiRT(X, tail)
{}

procedure phiAC_stable()
  requires exists X : Set<Entry> :: acc(X) &*& phiAC(X)
  ensures exists X : Set<Entry> :: acc(X) &*& phiAC(X)
{}

procedure S_UB_stable(head : Entry, tail : Entry)
  requires exists X : Set<Entry> :: acc(X) &*& (phiS(X) && phiUB(X, head, tail))
  ensures exists X : Set<Entry> :: acc(X) &*& (phiS(X) && phiUB(X, head, tail))
{}

procedure RT_S_UB_stable(head : Entry, tail : Entry)
  requires exists X : Set<Entry> :: acc(X) &*& (phiRT(X, tail) && phiS(X) && phiUB(X, head, tail))
  ensures exists X : Set<Entry> :: acc(X) &*& (phiRT(X, tail) && phiS(X) && phiUB(X, head, tail))
{}

procedure AC_S_UB_stable(head : Entry, tail : Entry)
  requires exists X : Set<Entry> :: acc(X) &*& (phiAC(X) && phiS(X) && phiUB(X, head, tail))
  ensures exists X : Set<Entry> :: acc(X) &*& (phiAC(X) && phiS(X) && phiUB(X, head, tail))
{}

procedure global2_stable(head : Entry, tail : Entry)
  requires exists X : Set<Entry> :: acc(X) &*& (phiAC(X) && phiS(X) && phiUB(X, head, tail) && phiRT(X, tail))
  ensures exists X : Set<Entry> :: acc(X) &*& (phiAC(X) && phiS(X) && phiUB(X, head, tail) && phiRT(X, tail))
{}

procedure isSetG_stable(head : Entry, tail : Entry, lb : Int, ub : Int)
  requires exists X : Set<Entry> :: acc(X) &*& isSetG(X, head, tail, lb, ub)
  ensures exists X : Set<Entry> :: acc(X) &*& isSetG(X, head, tail, lb, ub)
{}

/*
// Grouping of smaller set global shape predicates.
predicate globalRTSUB(X : Set<Entry>, head : Entry, tail : Entry)
  requires acc(X) {
        phiRT(X, tail) && 
        phiS(X) &&
        phiUB(X, head, tail) 
}
procedure globalRTSUB_stable(head : Entry, tail : Entry)
  requires exists X : Set<Entry> :: acc(X) &*& globalRTSUB(X, head, tail)
  ensures exists X : Set<Entry> :: acc(X) &*& globalRTSUB(X, head, tail)
{}

// Grouping of smaller set global shape predicates.
predicate globalRTACUB(X : Set<Entry>, head : Entry, tail : Entry)
  requires acc(X) {
        phiRT(X, tail) && 
        phiAC(X) &&
        phiUB(X, head, tail) 
}
procedure globalRTACUB_stable(head : Entry, tail : Entry)
  requires exists X : Set<Entry> :: acc(X) &*& globalRTACUB(X, head, tail)
  ensures exists X : Set<Entry> :: acc(X) &*& globalRTACUB(X, head, tail)
{}

// Grouping of smaller set global shape predicates.
predicate globalRTACS(X : Set<Entry>, head : Entry, tail : Entry)
  requires acc(X) {
        phiRT(X, tail) && 
        phiAC(X) &&
        phiS(X) 
}
procedure globalRTACS_stable(head : Entry, tail : Entry)
  requires exists X : Set<Entry> :: acc(X) &*& globalRTACS(X, head, tail)
  ensures exists X : Set<Entry> :: acc(X) &*& globalRTACS(X, head, tail)
{}
*/

procedure existsG_stable(k : Int)
  requires exists X : Set<Entry> :: acc(X) &*& existsG(X, k)
  ensures exists X : Set<Entry> :: acc(X) &*& existsG(X, k)
{}

procedure removedG_stable(k : Int)
  requires exists X : Set<Entry> :: acc(X) &*& removedG(X, k)
  ensures exists X : Set<Entry> :: acc(X) &*& removedG(X, k)
{}

