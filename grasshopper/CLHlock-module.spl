// CLH lock module

struct Node {
  var lock: Bool;
  var pred: Node;
}

predicate CLHfoot(Foot: Set<Node>, head: Node, tail: Node) 
  requires acc(Foot)
{ 
  exists Queue : Set<Node> :: ( 
    Queue = { z : Node :: z in Foot && Btwn(pred,tail,z,head) } 
    &&
    tail in Foot
    &&
    head in Foot
    &&
    Reach(pred, tail, head)
    &&
    (forall x : Node :: (x in Queue && x != head) ==> x.lock)
    &&
    (forall x : Node :: (x.lock && x != head && x.pred != null) ==> x in Queue)
  ) 
} 
