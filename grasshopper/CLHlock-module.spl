// CLH lock module

struct Node {
    var lock: Bool;
    var pred: Node;
}

predicate CLHfoot(Foot: Set<Node>, head: Node, tail: Node) 
requires acc(Foot) { 
    head in Foot
    && tail in Foot
    && Reach(pred, tail, head)
    && !head.lock
    && (forall x : Node :: (x in Foot && !x.lock) ==> x.pred == null)
}

predicate looseG(Foot : Set<Node>, a : Node, head : Node)
requires acc(Foot) {
    a in Foot
    && a != head
    && a.pred == null
}

predicate queuedG(Foot : Set<Node>, a : Node, head : Node, tail : Node, ap : Node)
requires acc(Foot) {
    a in Foot
    && a.pred == ap
    && Btwn(pred, tail, a, head)
    && ap in Foot
}
